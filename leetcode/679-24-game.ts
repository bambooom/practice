// https://leetcode.com/problems/24-game/
// You are given an integer array cards of length 4. You have four cards, each containing a number in the range [1, 9]. You should arrange the numbers on these cards in a mathematical expression using the operators ['+', '-', '*', '/'] and the parentheses '(' and ')' to get the value 24.
// You are restricted with the following rules:
// The division operator '/' represents real division, not integer division.
// For example, 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12.
// Every operation done is between two numbers. In particular, we cannot use '-' as a unary operator.
// For example, if cards = [1, 1, 1, 1], the expression "-1 - 1 - 1 - 1" is not allowed.
// You cannot concatenate numbers together
// For example, if cards = [1, 2, 1, 2], the expression "12 + 12" is not valid.
// Return true if you can get such expression that evaluates to 24, and false otherwise.

// Example 1:
// Input: cards = [4,1,8,7]
// Output: true
// Explanation: (8-4) * (7-1) = 24

// Example 2:
// Input: cards = [1,2,1,2]
// Output: false

// Editorial
function judgePoint24(cards: number[]): boolean {
  if (cards.length === 1) {
    // base case: We have only one number left, check if it is approximately 24.
    return Math.abs(cards[0] - 24.0) <= 0.1;
  }

  const generatePossibleResults = (a: number, b: number): number[] => {
    const res: number[] = [a + b, a - b, b - a, a * b];
    if (a) {
      res.push(b / a);
    }
    if (b) {
      res.push(a / b);
    }
    return res;
  };

  for (let i = 0; i < cards.length; i++) {
    for (let j = i + 1; j < cards.length; j++) {
      // create a new list with the remaining numbers and the new result;
      const newList: number[] = [];
      for (let k = 0; k < cards.length; k++) {
        if (k !== i && k !== j) {
          newList.push(cards[k]);
        }
      }

      // for any two numbers in the cards list, we perform every operation one by one
      const results = generatePossibleResults(cards[i], cards[j]);

      for (let idx = 0; idx < results.length; idx++) {
        // push the new result in the list
        newList.push(results[idx]);

        // Check if using this new list we can obtain the result 24.
        if (judgePoint24(newList)) {
          return true;
        }

        // backtrack: remove the result from the list
        newList.pop();
      }
    }
  }

  return false;
}

// Recurrence Relation:
//
// for num1 and num2 in array:
//     array.remove(num1)
//     array.remove(num2)

//     for each operation in all_operations:
//         array.insert(num1 operation num2)

//         # Next Recursive Call
//         # Check if using this updated array we can reach a result of 24.
//         if check_if_res_reached(array):
//             return true

//         # Backtrack steps.
//         array.remove(num1 operation num2)
//     array.insert(num2)
//     array.insert(num1)

// brute force loop to find out all possible combinations
const judgePoint24B = (nums: number[]) => {
  const normalize = nums.sort().map(String).join('');
  const dp = new Set([
    '0038',
    '0046',
    '0128',
    '0136',
    '0137',
    '0138',
    '0139',
    '0145',
    '0146',
    '0147',
    '0148',
    '0155',
    '0156',
    '0226',
    '0234',
    '0236',
    '0238',
    '0239',
    '0244',
    '0246',
    '0248',
    '0257',
    '0258',
    '0266',
    '0268',
    '0269',
    '0288',
    '0334',
    '0335',
    '0337',
    '0338',
    '0339',
    '0344',
    '0346',
    '0348',
    '0349',
    '0358',
    '0359',
    '0366',
    '0367',
    '0368',
    '0378',
    '0388',
    '0389',
    '0445',
    '0446',
    '0447',
    '0448',
    '0456',
    '0466',
    '0467',
    '0468',
    '0469',
    '0478',
    '0488',
    '0566',
    '0569',
    '0588',
    '0689',
    '0699',
    '0789',
    '0888',
    '1118',
    '1126',
    '1127',
    '1128',
    '1129',
    '1134',
    '1135',
    '1136',
    '1137',
    '1138',
    '1139',
    '1144',
    '1145',
    '1146',
    '1147',
    '1148',
    '1149',
    '1155',
    '1156',
    '1157',
    '1158',
    '1166',
    '1168',
    '1169',
    '1188',
    '1224',
    '1225',
    '1226',
    '1227',
    '1228',
    '1229',
    '1233',
    '1234',
    '1235',
    '1236',
    '1237',
    '1238',
    '1239',
    '1244',
    '1245',
    '1246',
    '1247',
    '1248',
    '1249',
    '1255',
    '1256',
    '1257',
    '1258',
    '1259',
    '1266',
    '1267',
    '1268',
    '1269',
    '1277',
    '1278',
    '1279',
    '1288',
    '1289',
    '1333',
    '1334',
    '1335',
    '1336',
    '1337',
    '1338',
    '1339',
    '1344',
    '1345',
    '1346',
    '1347',
    '1348',
    '1349',
    '1356',
    '1357',
    '1358',
    '1359',
    '1366',
    '1367',
    '1368',
    '1369',
    '1377',
    '1378',
    '1379',
    '1388',
    '1389',
    '1399',
    '1444',
    '1445',
    '1446',
    '1447',
    '1448',
    '1449',
    '1455',
    '1456',
    '1457',
    '1458',
    '1459',
    '1466',
    '1467',
    '1468',
    '1469',
    '1477',
    '1478',
    '1479',
    '1488',
    '1489',
    '1555',
    '1556',
    '1559',
    '1566',
    '1567',
    '1568',
    '1569',
    '1578',
    '1579',
    '1588',
    '1589',
    '1599',
    '1666',
    '1668',
    '1669',
    '1679',
    '1688',
    '1689',
    '1699',
    '1779',
    '1788',
    '1789',
    '1799',
    '1888',
    '1889',
    '2223',
    '2224',
    '2225',
    '2227',
    '2228',
    '2229',
    '2233',
    '2234',
    '2235',
    '2236',
    '2237',
    '2238',
    '2239',
    '2244',
    '2245',
    '2246',
    '2247',
    '2248',
    '2249',
    '2255',
    '2256',
    '2257',
    '2258',
    '2259',
    '2266',
    '2267',
    '2268',
    '2269',
    '2277',
    '2278',
    '2288',
    '2289',
    '2333',
    '2335',
    '2336',
    '2337',
    '2338',
    '2339',
    '2344',
    '2345',
    '2346',
    '2347',
    '2348',
    '2349',
    '2355',
    '2356',
    '2357',
    '2358',
    '2359',
    '2366',
    '2367',
    '2368',
    '2369',
    '2377',
    '2378',
    '2379',
    '2388',
    '2389',
    '2399',
    '2444',
    '2445',
    '2446',
    '2447',
    '2448',
    '2449',
    '2455',
    '2456',
    '2457',
    '2458',
    '2459',
    '2466',
    '2467',
    '2468',
    '2469',
    '2477',
    '2478',
    '2479',
    '2488',
    '2489',
    '2499',
    '2557',
    '2558',
    '2559',
    '2566',
    '2567',
    '2568',
    '2569',
    '2577',
    '2578',
    '2579',
    '2588',
    '2589',
    '2666',
    '2667',
    '2668',
    '2669',
    '2678',
    '2679',
    '2688',
    '2689',
    '2699',
    '2778',
    '2788',
    '2789',
    '2888',
    '2889',
    '2899',
    '3333',
    '3334',
    '3335',
    '3336',
    '3337',
    '3338',
    '3339',
    '3344',
    '3345',
    '3346',
    '3347',
    '3348',
    '3349',
    '3355',
    '3356',
    '3357',
    '3359',
    '3366',
    '3367',
    '3368',
    '3369',
    '3377',
    '3378',
    '3379',
    '3388',
    '3389',
    '3399',
    '3444',
    '3445',
    '3446',
    '3447',
    '3448',
    '3449',
    '3455',
    '3456',
    '3457',
    '3458',
    '3459',
    '3466',
    '3468',
    '3469',
    '3477',
    '3478',
    '3479',
    '3489',
    '3499',
    '3556',
    '3557',
    '3558',
    '3559',
    '3566',
    '3567',
    '3568',
    '3569',
    '3578',
    '3579',
    '3588',
    '3589',
    '3599',
    '3666',
    '3667',
    '3668',
    '3669',
    '3677',
    '3678',
    '3679',
    '3688',
    '3689',
    '3699',
    '3777',
    '3778',
    '3779',
    '3788',
    '3789',
    '3799',
    '3888',
    '3889',
    '3899',
    '3999',
    '4444',
    '4445',
    '4446',
    '4447',
    '4448',
    '4449',
    '4455',
    '4456',
    '4457',
    '4458',
    '4468',
    '4469',
    '4477',
    '4478',
    '4479',
    '4488',
    '4489',
    '4555',
    '4556',
    '4557',
    '4558',
    '4559',
    '4566',
    '4567',
    '4568',
    '4569',
    '4577',
    '4578',
    '4579',
    '4588',
    '4589',
    '4599',
    '4666',
    '4667',
    '4668',
    '4669',
    '4677',
    '4678',
    '4679',
    '4688',
    '4689',
    '4699',
    '4777',
    '4778',
    '4788',
    '4789',
    '4799',
    '4888',
    '4889',
    '4899',
    '5555',
    '5556',
    '5559',
    '5566',
    '5567',
    '5568',
    '5577',
    '5578',
    '5588',
    '5589',
    '5599',
    '5666',
    '5667',
    '5668',
    '5669',
    '5677',
    '5678',
    '5679',
    '5688',
    '5689',
    '5699',
    '5779',
    '5788',
    '5789',
    '5888',
    '5889',
    '6666',
    '6668',
    '6669',
    '6679',
    '6688',
    '6689',
    '6789',
    '6799',
    '6888',
    '6889',
    '6899',
    '7889',
  ]);

  return dp.has(normalize);
};
